@model List<SkillSwaps.Models.Course.GetCourseData>
@using System.Web.Mvc
@using Domain.Enums

@{
    Layout = null;

    var categories = Enum.GetValues(typeof(Domain.Enums.EACategory))
                            .Cast<Domain.Enums.EACategory>()
                            .Select(c => new SelectListItem
                            {
                                Text = c.ToString().Replace("_", " "),
                                Value = c.ToString()
                            });
}

<!DOCTYPE html>
<html lang="ro">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin - Aprobare Cursuri</title>

    <link rel="stylesheet" href="~/Content/assets/css/admin-table.css" />
    <style>
        /* Stiluri pentru Mesajele de Alertă */
        .alert {
            padding: 10px;
            margin-bottom: 15px;
            border-radius: 4px;
            font-weight: bold;
            text-align: center;
            display: none; /* Ascuns implicit */
        }

        .success-alert {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .error-alert {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        /* Stiluri pentru Modal (Pop-up) */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background-color: #fefefe;
            margin: auto;
            padding: 30px;
            border: 1px solid #888;
            width: 80%;
            max-width: 500px;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            position: relative;
        }

        .close-button {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            position: absolute;
            top: 10px;
            right: 15px;
        }

            .close-button:hover,
            .close-button:focus {
                color: black;
                text-decoration: none;
                cursor: pointer;
            }

        .form-group {
            margin-bottom: 15px;
        }

            .form-group label {
                display: block;
                margin-bottom: 5px;
                font-weight: bold;
                color: #333;
            }

            .form-group input[type="text"],
            .form-group input[type="email"],
            .form-group select,
            .form-group textarea {
                width: calc(100% - 20px);
                padding: 10px;
                border: 1px solid #ccc;
                border-radius: 4px;
                font-size: 16px;
                box-sizing: border-box;
            }

            /* Stil specific pentru input-ul de tip file */
            .form-group input[type="file"] {
                width: calc(100% - 20px);
                padding: 8px; /* Un pic mai puțin padding decât text input-urile */
                border: 1px solid #ccc;
                border-radius: 44px;
                font-size: 16px;
                box-sizing: border-box;
                background-color: #f9f9f9;
                cursor: pointer;
            }

                .form-group input[type="file"]::-webkit-file-upload-button {
                    background: #007bff;
                    color: white;
                    padding: 8px 12px;
                    border: none;
                    border-radius: 4px;
                    cursor: pointer;
                    margin-right: 10px;
                    transition: background-color 0.3s ease;
                }

                    .form-group input[type="file"]::-webkit-file-upload-button:hover {
                        background: #0056b3;
                    }

        /* Stil pentru mesajele de validare */
        .validation-error {
            color: red;
            font-size: 0.9em;
            margin-top: 5px;
            display: none;
        }

        .modal-content h2 {
            text-align: center;
            margin-bottom: 25px;
            color: #333;
        }

        .modal-content .primary-btn {
            width: 100%;
            padding: 12px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 44px;
            font-size: 18px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            .modal-content .primary-btn:hover {
                background-color: #0056b3;
            }

        /* Ajustări pentru butoanele de acțiune pentru a încăpea */
        .action-buttons {
            display: flex;
            gap: 5px;
            justify-content: center;
            flex-wrap: wrap;
        }

            .action-buttons button {
                padding: 8px 12px;
                font-size: 14px;
                white-space: nowrap;
            }
    </style>
</head>
<body>
    <div class="header-bar">
        <span class="logo-text">SkillSwaps</span>
    </div>

    <div class="container">
        <h2>Cursuri în Așteptare Aprobare</h2>

        @* Container pentru mesaje de succes/eroare *@
        <div id="statusMessageContainer" class="alert" style="display:none;"></div>

        @* Mesajele TempData ar trebui să fie afișate prin JS acum, dar le las pentru fallback *@
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert success-alert">
                @TempData["SuccessMessage"]
            </div>
        }

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert error-alert">
                @TempData["ErrorMessage"]
            </div>
        }

        <div class="table-header-actions">
            <form method="get" action="@Url.Action("GetPendingCourse", "Admin")" style="display:inline;">
                <button type="submit" class="filter-btn secondary-btn">Reîmprospătează lista</button>
            </form>
        </div>

        @if (Model == null || !Model.Any())
        {
            <p class="no-users-message">Nu există cursuri în așteptare de aprobat.</p>
        }
        else
        {
            <table>
                <thead>
                    <tr>
                        <th>ID Curs</th>
                        <th>Titlu</th>
                        <th>Descriere</th>
                        <th>Profesor</th>
                        <th>Categorie</th>
                        <th>Data Publicării</th>
                        <th>Acțiuni</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var course in Model)
                    {
                        <tr>
                            <td>@course.CourseId</td>
                            <td>@course.Title</td>
                            <td>@course.Description</td>
                            <td>@course.Teacher</td>
                            <td>@course.Category</td>
                            <td>@(course.PublicationDateTime.ToString("dd/MM/yyyy HH:mm"))</td>
                            <td>
                                <div class="action-buttons">
                                    <button class="edit-btn" data-course-id="@course.CourseId"
                                            data-title="@course.Title"
                                            data-description="@course.Description"
                                            data-teacher="@course.Teacher"
                                            data-category="@course.Category">
                                        Editează
                                    </button>
                                    <form method="post" action="@Url.Action("RejectCourse", "Admin")" style="display:inline;">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="courseId" value="@course.CourseId" />
                                        <button type="submit" class="block-btn">Respinge</button>
                                    </form>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>

    <div id="editCourseModal" class="modal">
        <div class="modal-content">
            <span class="close-button">&times;</span>
            <h2>Detalii/Editare Curs</h2>
            <form id="editCourseForm" enctype="multipart/form-data">
                @Html.AntiForgeryToken()
                <input type="hidden" id="editCourseId" name="CourseId" />

                <div class="form-group">
                    <label for="editTitle">Titlu:</label>
                    <input type="text" id="editTitle" name="Title" required minlength="5" />
                    <span class="validation-error" id="titleError">Titlul trebuie să aibă minim 5 caractere.</span>
                </div>

                <div class="form-group">
                    <label for="editDescription">Descriere:</label>
                    <textarea id="editDescription" name="Description" required rows="5" minlength="10"></textarea>
                    <span class="validation-error" id="descriptionError">Descrierea trebuie să aibă minim 10 caractere.</span>
                </div>

                <div class="form-group">
                    <label for="editTeacher">Profesor:</label>
                    <input type="text" id="editTeacher" name="Teacher" required minlength="3" />
                    <span class="validation-error" id="teacherError">Numele profesorului trebuie să aibă minim 3 caractere.</span>
                </div>

                <div class="form-group">
                    <label for="editCategory">Categorie:</label>
                    <select id="editCategory" name="Category" required>
                        @foreach (var category in categories)
                        {
                            <option value="@category.Value">@category.Text</option>
                        }
                    </select>
                    <span class="validation-error" id="categoryError">Vă rugăm selectați o categorie validă.</span>
                </div>

                <div class="form-group">
                    <label for="editCourseImage">Imagine Curs (obligatoriu pentru aprobare):</label>
                    <input type="file" id="editCourseImage" name="CourseImage" accept="image/jpeg, image/png, image/gif" />
                    <span class="validation-error" id="imageError">Vă rugăm selectați o imagine validă (JPG, PNG, GIF, max 2MB).</span>
                    <div id="currentCourseImageContainer" style="margin-top: 10px; display: none;">
                        <img id="currentCourseImage" src="" alt="Imagine Curs Curentă" style="max-width: 100px; max-height: 100px; display: none;" />
                    </div>
                </div>

                <button type="submit" class="primary-btn">Salvează Modificările & Aprobă</button>
            </form>
        </div>
    </div>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script>
        $(document).ready(function () {
            var modal = $('#editCourseModal');
            var closeButton = $('.close-button');
            var editButtons = $('.edit-btn');
            var editCourseForm = $('#editCourseForm');
            var statusMessageContainer = $('#statusMessageContainer'); // Referința la div-ul de mesaje

            // Funcție pentru afișarea mesajelor
            function displayMessage(message, type) {
                statusMessageContainer.removeClass('success-alert error-alert').addClass(type + '-alert').text(message).show();
                // Ascunde mesajul după 5 secunde
                setTimeout(function () {
                    statusMessageContainer.fadeOut();
                }, 5000);
            }

            editButtons.on('click', function () {
                var courseId = $(this).data('course-id');
                var title = $(this).data('title');
                var description = $(this).data('description');
                var teacher = $(this).data('teacher');
                var category = $(this).data('category');

                $('#editCourseId').val(courseId);
                $('#editTitle').val(title);
                $('#editDescription').val(description);
                $('#editTeacher').val(teacher);
                $('#editCategory').val(category);

                // Asigură-te că elementele pentru imaginea curentă sunt ascunse la deschiderea modalului
                // deoarece cursurile în așteptare nu au încă imagini.
                $('#currentCourseImage').attr('src', '').hide();
                $('#currentCourseImageContainer').hide();
                $('#editCourseImage').val(''); // Resetează input-ul de fișier pentru a nu reține selecția anterioară

                $('.validation-error').hide(); // Ascunde toate mesajele de validare
                statusMessageContainer.hide(); // Ascunde mesajele globale la deschiderea modalului

                modal.css({
                    'display': 'flex',
                    'justify-content': 'center',
                    'align-items': 'center'
                });
            });

            closeButton.on('click', function () {
                modal.css('display', 'none');
                $('.validation-error').hide();
                statusMessageContainer.hide(); // Ascunde mesajele globale la închiderea modalului
            });

            $(window).on('click', function (event) {
                if ($(event.target).is(modal)) {
                    modal.css('display', 'none');
                    $('.validation-error').hide();
                    statusMessageContainer.hide(); // Ascunde mesajele globale la închiderea modalului
                }
            });

            editCourseForm.on('submit', function (event) {
                event.preventDefault();

                $('.validation-error').hide(); // Ascunde toate mesajele de validare la fiecare submit
                statusMessageContainer.hide(); // Ascunde mesajele globale la fiecare submit

                var isValid = true;

                var title = $('#editTitle').val().trim();
                if (title.length < 5) {
                    $('#titleError').show();
                    isValid = false;
                }

                var description = $('#editDescription').val().trim();
                if (description.length < 10) {
                    $('#descriptionError').show();
                    isValid = false;
                }

                var teacher = $('#editTeacher').val().trim();
                if (teacher.length < 3) {
                    $('#teacherError').show();
                    isValid = false;
                }

                var category = $('#editCategory').val();
                // Verificăm dacă categoria selectată este o valoare validă (nu e default "Please select..." sau gol)
                // Aici depinde cum ai populat lista, dacă "None" e o valoare validă în enum, sau e doar placeholder
                if (!category || category === "") { // Potrivit cu data-category care ar trebui să fie o valoare enum
                    $('#categoryError').show();
                    isValid = false;
                }


                // Validarea imaginii (obligatorie pentru aprobare)
                var fileInput = $('#editCourseImage')[0];
                if (fileInput.files.length === 0) {
                    $('#imageError').text('O imagine este obligatorie pentru curs.').show();
                    isValid = false;
                } else {
                    var file = fileInput.files[0];
                    var allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];
                    var maxSize = 2 * 1024 * 1024; // 2MB

                    if ($.inArray(file.type, allowedTypes) === -1) {
                        $('#imageError').text('Tipul fișierului nu este permis (doar JPG, PNG, GIF).').show();
                        isValid = false;
                    }
                    if (file.size > maxSize) {
                        $('#imageError').text('Dimensiunea fișierului depășește 2MB.').show();
                        isValid = false;
                    }
                }

                if (!isValid) {
                    return; // Oprește submit-ul dacă validarea a eșuat
                }

                // Folosește FormData pentru a include fișierul și toate câmpurile formularului
                var formData = new FormData(this);

                $.ajax({
                    url: '@Url.Action("ApproveCourse", "Admin")', // <--- Aceasta este linia importantă!
                    type: 'POST',
                    data: formData,
                    processData: false, // OBLIGATORIU pentru FormData
                    contentType: false, // OBLIGATORIU pentru FormData
                    success: function (response) {
                        if (response.success) {
                            displayMessage('Cursul a fost actualizat și aprobat cu succes!', 'success');
                            modal.css('display', 'none');
                            // Așteaptă puțin înainte de reload pentru ca userul să vadă mesajul
                            setTimeout(function() {
                                location.reload(); // Reîncarcă pagina pentru a vedea modificările
                            }, 1000); // Reîncarcă după 1 secundă
                        } else {
                            // Afișează mesajul de eroare returnat de controller
                            displayMessage('Eroare la actualizarea cursului: ' + response.message, 'error');
                        }
                    },
                    error: function (xhr, status, error) {
                        // Afișează o eroare mai detaliată
                        var errorMessage = 'A apărut o eroare la server: ' + xhr.status + ' ' + xhr.statusText;
                        if (xhr.responseText) {
                            try {
                                var responseJson = JSON.parse(xhr.responseText);
                                if (responseJson.message) {
                                    errorMessage += '. Detalii: ' + responseJson.message;
                                }
                            } catch (e) {
                                errorMessage += '. Răspuns server: ' + xhr.responseText.substring(0, 100) + '...'; // Preia primele 100 de caractere
                            }
                        }
                        displayMessage(errorMessage, 'error');
                        console.error("Eroare AJAX completă:", xhr);
                        console.error("URL-ul solicitat:", this.url);
                    }
                });
            });
        });
    </script>
</body>
</html>