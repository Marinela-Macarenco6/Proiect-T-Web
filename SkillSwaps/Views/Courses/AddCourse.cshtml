@model SkillSwaps.Models.Course.AddCourseData
@{
    Layout = null;
    ViewBag.Title = "Create Course";
}

<!DOCTYPE html>
<html lang="ro">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Creare Curs | SkillSwaps</title>
    <link rel="stylesheet" href="~/Content/assets/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/Content/assets/css/style.css" />
    <style>
        .error-message {
            color: red;
            font-size: 0.8em;
            margin-top: 5px;
        }
    </style>
</head>
<body class="login-body" data-vide-bg="~/Content/assets/img/login-bg.mp4">
    <main class="login-body" data-vide-bg="~/Content/assets/img/login-bg.mp4">
        <form id="createCourseForm" class="form-default" action="/Courses/AddCourse" method="post" onsubmit="return validateForm()">
            @Html.AntiForgeryToken()

            <div class="login-form">
                <div class="logo-login">
                    <img src="~/Content/assets/img/logo/loder.png" alt="logo" />
                </div>

                <h2>Creare Curs Nou</h2>

                @if (!ViewData.ModelState.IsValid && ViewData.ModelState.Count > 0)
                {
                    <div class="alert alert-danger">
                        <ul class="mb-0">
                            @foreach (var modelError in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                            {
                                <li>@modelError.ErrorMessage</li>
                            }
                        </ul>
                    </div>
                }

                <div class="form-input">
                    <label for="Title">Titlu</label>
                    <input type="text" name="Title" id="Title" placeholder="Titlu curs" required />
                    <p id="titleError" class="error-message"></p>
                </div>

                <div class="form-input">
                    <label for="Teacher">Profesor</label>
                    <input type="text" name="Teacher" id="Teacher" placeholder="Numele profesorului" required />
                    <p id="teacherError" class="error-message"></p>
                </div>

                <div class="form-input">
                    <label for="Category">Categorie</label>
                    <select name="Category" id="Category" required>
                        <option value="">Selectează o categorie</option>
                        @foreach (var category in Enum.GetValues(typeof(Domain.Enums.EACategory)))
                        {
                            <option value="@category">@category</option>
                        }
                    </select>
                    <p id="categoryError" class="error-message"></p>
                </div>

                <div class="form-input">
                    <label for="Description">Descriere</label>
                    <textarea name="Description" id="Description" placeholder="Descriere curs" required></textarea>
                    <p id="descriptionError" class="error-message"></p>
                </div>

                <div class="form-input pt-30">
                    <input type="submit" value="Creare Curs" class="btn btn-primary" />
                </div>

                <div class="pt-3">
                    <a href="@Url.Action("Index", "Home")" class="registration">Înapoi Acasă</a>
                </div>
            </div>
        </form>
    </main>

    <script src="~/Content/assets/js/jquery-1.12.4.min.js"></script>
    <script src="~/Content/assets/js/bootstrap.min.js"></script>
    <script>
        function validateForm() {
            const titleInput = document.getElementById('Title');
            const teacherInput = document.getElementById('Teacher');
            const categoryInput = document.getElementById('Category');
            const descriptionInput = document.getElementById('Description');

            const titleError = document.getElementById('titleError');
            const teacherError = document.getElementById('teacherError');
            const categoryError = document.getElementById('categoryError');
            const descriptionError = document.getElementById('descriptionError');

            let isValid = true;

            titleError.textContent = '';
            teacherError.textContent = '';
            categoryError.textContent = '';
            descriptionError.textContent = '';

            if (titleInput.value.length < 3) {
                titleError.textContent = 'Titlul trebuie să aibă cel puțin 3 caractere.';
                isValid = false;
            }

            if (teacherInput.value.length < 3) {
                teacherError.textContent = 'Numele profesorului trebuie să aibă cel puțin 3 caractere.';
                isValid = false;
            }

            if (categoryInput.value === "") {
                categoryError.textContent = 'Te rog alege o categorie.';
                isValid = false;
            }

            if (descriptionInput.value.length < 10) {
                descriptionError.textContent = 'Descrierea trebuie să aibă cel puțin 10 caractere.';
                isValid = false;
            }

            return isValid;
        }
    </script>
</body>
</html>